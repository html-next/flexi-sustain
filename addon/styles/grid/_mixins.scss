
@mixin make-col($size, $columns, $gutter-padding) {
  position: relative;
  min-height: 1px;
  padding-right: pixel($gutter-padding / 2);
  padding-left:  pixel($gutter-padding / 2);
  @include flex(0 0 percentage($size / $columns));
  max-width: percentage($size / $columns);
}


// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.
// Makes the @content apply to the given breakpoint and wider.
@mixin breakpoint-up($name, $breakpoints) {
  $breakpoint: map-get($breakpoints, $name);
  $prefix: nth($breakpoint, 1);
  $min: breakpoint-min($name, $breakpoints);

  @if $include-media-css {
    @if $min {
      // @media
      @media (min-width: pixel($min)) {
        @content;
      }
    } @else {
      @content;
    }
  }

  .container-#{$prefix} {
    @content;
  }
}

@mixin make-columns($breakpoints, $column-prefix, $columns) {
  $breakpoint-counter: 0;
  $col-prefix: '';
  @if ($column-prefix) {
    $col-prefix: '#{$column-prefix}-';
  }

  @each $name, $breakpoint-setup in $breakpoints {
    $bp-prefix: nth($breakpoint-setup, 1);
    $breakpoint-counter: ($breakpoint-counter + 1);

    // @media and @container breakpoints
    @include breakpoint-up($name, $breakpoints) {

      // responsive utilities
      .hidden-#{$bp-prefix} {
        display: none;
      }

      .visible-#{$bp-prefix} {
        display: initial;
      }

      .wrap-#{$bp-prefix} {
        @include flexDisplay();
        @include flexWrap(wrap);
      }

      .nowrap-#{$bp-prefix} {
        @include flexDisplay();
        @include flexWrap(nowrap);
      }

      .fit-#{$bp-prefix} {
        @include flex(none);
      }

      .fill-#{$bp-prefix} {
        @include flex(1 1 auto);
      }

      .horizontal-#{$bp-prefix} {
        @include flexDirection(row);
      }

      .vertical-#{$bp-prefix} {
        @include flexDirection(column);
      }

      // columns
      @for $i from 1 through $columns {
        .#{$col-prefix}#{$bp-prefix}-#{$i} {
          @include make-col($i, $columns, $gutter-padding);
        }
      }

      // offsets
      @for $i from 0 through ($columns - 1) {
        @if $breakpoint-counter != 1 or $i != 0 { // Avoid emitting useless .col-xs-offset-0
          .offset-#{$bp-prefix}-#{$i + 1} {
            margin-left: percentage($i / $columns);
          }
        }
      }

    }
  }
}
